# Default values for webapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  environment: ""

# -- string to partially override webapp.fullname
nameOverride: ""
# -- string to fully override webapp.fullname
fullnameOverride: ""


createNamespace: true

image:
  repository:
  tag:
  pullPolicy: IfNotPresent

serviceAccount:
  create: true
  annotations:
    helm.sh/hook-weight: "-2"
  name: ""

web:
  enabled: true
  ports: []
  replicaCount: 1
  role: "web"
  command: []
  args: []
  extraEnv: {}
  config: {}
  livenessProbe: {}
    # httpGet:
    #   scheme: "HTTP"
    #   path: "/"
    # failureThreshold: 4
    # initialDelaySeconds: 5
    # periodSeconds: 10
  # -- readiness probe - should check service dependencies
  readinessProbe: {}
    # httpGet:
    #   scheme: "HTTP"
    #   path: "/"
    # failureThreshold: 2
    # initialDelaySeconds: 8
    # periodSeconds: 5
    # successThreshold: 2
  # -- web container resources
  resources:
    requests:
      cpu: 25m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi
  podDisruptionBudget:
    # -- Only set this when replica count > 1
    maxUnavailable: null
  hpa:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    metrics:
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 80
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 10
      - periodSeconds: 60
        type: Pods
        value: 1
      selectPolicy: Max
      stabilizationWindowSeconds: 300
    scaleUp: {}
  sidecars: {}
  affinity: {}
  tolerations: []

allowTrafficInNamespace: true

envFrom: []
secretEnv: {}
extraEnv: {}
volumes: []
volumeMounts: []


cron:
  role: "cron"
  jobList:
    oneOffJob:
      enabled: false
      schedule: "0 0 * * *"
      args: []
      extraEnv: {}
      resources: {}

# -- pod security context
podSecurityContext:
  runAsNonRoot: true
  # runAsUser: 0
  # runAsGroup: 0
  # fsGroup: 0

# -- security context for containers
securityContext:
  privileged: false
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 8443
  targetPort: "http"

ingress:
  enabled: false
  tls:
    enabled: true
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
  ingressClassName: public-nginx-nlb
  pathType: Prefix
  path: "/"
rbac:
  create: true

sidecars: {}
